opam-version: "2.0"
name: "dkml-component-staging-ocamlrun"
version: "4.12.1-1"
synopsis: "DKML component for ocamlrun"
description:
  "Standalone distribution of OCaml in <share>/staging-files containing just ocamlrun, the OCaml Stdlib and the other OCaml libraries (str, unix, bigarray, etc.)"
maintainer: ["opensource+diskuv-ocaml@support.diskuv.com"]
authors: ["Diskuv, Inc. <opensource+diskuv-ocaml@support.diskuv.com>"]
license: "Apache-2.0"
homepage: "https://github.com/diskuv/dkml-component-ocamlcompiler"
bug-reports: "https://github.com/diskuv/dkml-component-ocamlcompiler/issues"
depends: [
  "dkml-install"            {>= "0.1.0"}
  # install/ocamlrun/dune site requires dkml-install-runner package
  "dkml-install-runner"     {>= "0.1.0"}
  "dune"                    {>= "2.9"}
  "dune-site"               {>= "2.9"}
]
available: [ os = "macos" | os = "linux" | os = "win32" ]
build-env: [
  [DKML_VER = "0.4.0"]
]
build: [
  # Create a DKMLDIR. Its structure mimics a git submodule setup.
  # nit: We probably could use Opam's "extra-files" if we could control where the .tar.gz was extracted to.
  #   <dkmldir>/.dkmlroot
  ["install" "-d" "dkmldir"]
  ["sh" "-c" "printf 'dkml_root_version=%s\\n' \"$DKML_VER\" > dkmldir/.dkmlroot"]

  #   <dkmldir>/vendor/dkml-runtime-common/
  ["install" "-d" "dkmldir/vendor/dkml-runtime-common"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-runtime-common" "dl/dkml-runtime-common.tar.gz" "--strip-components=1"]

  #   <dkmldir>/vendor/dkml-compiler/
  ["install" "-d" "dkmldir/vendor/dkml-compiler/src"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-compiler" "dl/dkml-compiler.tar.gz" "--strip-components=1"]

  # --------------
  # First pass
  # --------------

  # [1] Run reproducible-compile-ocaml-1-setup.sh
  [
    "env" "TOPDIR=dkmldir/vendor/dkml-runtime-common/all/emptytop"
      "dkmldir/vendor/dkml-compiler/src/reproducible-compile-ocaml-1-setup.sh"
      "-d" "dkmldir"
      "-f" "src/ocaml-1"
      "-k" "vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh"
      #   OCaml 4.12.1
      "-u" "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5"
      "-v" "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5"
      #   Host-compile into staging-files/<host-abi>
      "-t" "%{_:share}%/staging-files"
      "-pwindows_x86_64"  { os = "win32" }
      "-plinux_x86_64"    { os = "linux" }
      "-pdarwin_x86_64"   { os = "macos" }
      #   ABIs
      "-ewindows_x86_64"  { os = "win32" }
      "-elinux_x86_64"    { os = "linux" }
      "-edarwin_x86_64"   { os = "macos" }
      #   Cross-compile into staging-files/<cross-abi>
      "-g" "%{_:share}%/staging-files"
      #   Target architectures (if cross-compiling)
      "-adarwin_arm64=vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh" { os = "macos" }
      #     For any non cross-compiling platforms we save time and space by
      #     only building the runtime.
      "-r"                                        { os = "win32" | os = "linux" }
  ]

  # [1] Run reproducible-compile-ocaml-2-build_host-noargs.sh
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files' && share/dkml/repro/100co/vendor/dkml-compiler/src/reproducible-compile-ocaml-2-build_host-noargs.sh"
  ]

  # [1] Run reproducible-compile-ocaml-3-build_cross-noargs.sh if cross-compiling,
  # which will place its output into staging-files/<cross-abi>
  # (confer: "-g" "%{_:share}%/staging-files")
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files/darwin_x86_64'   && share/dkml/repro/100co/vendor/dkml-compiler/src/reproducible-compile-ocaml-3-build_cross-noargs.sh"
  ] { os = "macos" }

  # --------------
  # Second pass
  #   For platforms that can do multiple _host_ ABIs _without_ cross-compiling.
  #   * MSVC can trivially do 32-bit and 64-bit without cross-compiling.
  #   * Most often Linux can as well as long as `gcc -m32` is configured
  #     (TODO: add 32-bit check for Linux)
  # --------------

  # [2] Run reproducible-compile-ocaml-1-setup.sh
  [
    "env" "TOPDIR=dkmldir/vendor/dkml-runtime-common/all/emptytop"
      "dkmldir/vendor/dkml-compiler/src/reproducible-compile-ocaml-1-setup.sh"
      "-d" "dkmldir"      
      "-f" "src/ocaml-2"
      "-r" # Build runtime only
      "-k" "vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh"
      #   OCaml 4.12.1
      "-u" "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5"
      "-v" "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5"
      #   Host-compile into staging-files/<host-abi>
      "-t" "%{_:share}%/staging-files"
      "-pwindows_x86"     { os = "win32" }
      "-plinux_x86"       { os = "linux" }
      #   ABIs
      "-ewindows_x86"     { os = "win32" }
      "-elinux_x86"       { os = "linux" }
  ] { !(os = "macos") }

  # [2] Run reproducible-compile-ocaml-2-build_host-noargs.sh
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files' && share/dkml/repro/100co/vendor/dkml-compiler/src/reproducible-compile-ocaml-2-build_host-noargs.sh"
  ] { !(os = "macos") }

  # --------------
  # Clean build files
  # --------------

  [ "rm" "-rf" "%{_:share}%/staging-files/share" ]
  [ "rm" "-rf" "%{_:share}%/staging-files/src" ]

  # --------------
  # Build install plugin and .api library
  # --------------

  ["dune" "subst"] {dev}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "--promote-install-files=false"
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
  ["dune" "install" "-p" name "--create-install-files" name]

]
dev-repo: "git+https://github.com/diskuv/dkml-component-ocamlcompiler.git"
extra-source "dl/dkml-runtime-common.tar.gz" {
  # dkml-runtime-common can be less or equal to DKML_VER
  src: "https://github.com/diskuv/dkml-runtime-common/archive/refs/tags/v0.4.0-prerel18.tar.gz"
  checksum: [
    "sha256=2167848caaf5a5933001d2b9ec32413476dd2b80ae351454d8ab71da18e16ec1"
  ]
}
extra-source "dl/dkml-compiler.tar.gz" {
  # dkml-compiler can be less or equal to DKML_VER
  src: "https://github.com/diskuv/dkml-compiler/archive/refs/tags/v4.12.1-prerel2.tar.gz"
  checksum: [
    "sha256=656c48a8d8330d152098debf58ef4e13ce7ab686d64f2da2f6827dd02ca7b9c3"
  ]
}
