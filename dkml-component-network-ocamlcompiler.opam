opam-version: "2.0"
name: "dkml-component-network-ocamlcompiler"
version: "4.12.1"
synopsis: "DKML component for ocamlcompiler"
description:
  "Network installed component for OCaml bytecode and native compiler"
maintainer: ["opensource+diskuv-ocaml@support.diskuv.com"]
authors: ["Diskuv, Inc. <opensource+diskuv-ocaml@support.diskuv.com>"]
license: "Apache-2.0"
homepage: "https://github.com/diskuv/dkml-component-ocamlcompiler"
bug-reports: "https://github.com/diskuv/dkml-component-ocamlcompiler/issues"
depends: [
  "dkml-component-network-unixutils"  {>= "0.1.0"}
  "dkml-component-staging-ocamlrun"   {= version}
  "dkml-install"            {>= "0.1.0"}
  "dune"                    {>= "2.9"}
  "base64"                  {>= "3.5.0"}
]
build-env: [
  # If this version of OCaml and Opam are not available on GitLab as assets,
  # then setup-userprofile will compile them from scratch (using MSYS2 and
  # Cygwin, respectively)
  [DKML_VER = "0.4.0-prerel18"]
]
build: [
  # OCaml source code
  ["install" "-d" "dl/ocaml/flexdll"]
  ["tar" "xCfz" "dl/ocaml"          "dl/ocaml.tar.gz"   "--strip-components=1"]
  ["tar" "xCfz" "dl/ocaml/flexdll"  "dl/flexdll.tar.gz" "--strip-components=1"]

  # Portable shell scripts for OCaml compiling
  #
  # ** The only portable shell scripts needed are that that compile the bytecode
  # ** interpreter for use in the dkml-component-staging-ocamlrun build:[] section.
  # ** Any other logic needed for compiling the full native-code compiler
  # ** can be done in OCaml bytecode. But since the portable shell scripts
  # ** do 90% of the work needed for the native-code compiler, no strong
  # ** reason (yet) to convert the native-code compiler installation into OCaml
  # ** bytecode.
  #
  #   Create a minimal DKMLDIR (no dkml-runtime-distribution) that can build
  #   the r-c-ocaml-* OCaml compiler. Its structure mimics a
  #   git submodule setup.
  #
  #   <dkmldir>/.dkmlroot
  ["install" "-d" "dkmldir"]
  ["sh" "-c" "printf 'dkml_root_version=%s\\n' \"$DKML_VER\" > dkmldir/.dkmlroot"]

  #   <dkmldir>/vendor/dkml-runtime-common/
  ["install" "-d" "dkmldir/vendor/dkml-runtime-common"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-runtime-common" "dl/dkml-runtime-common.tar.gz" "--strip-components=1"]

  #   <dkmldir>/vendor/dkml-compiler/
  ["install" "-d" "dkmldir/vendor/dkml-compiler/src"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-compiler" "dl/dkml-compiler.tar.gz" "--strip-components=1"]
]
install: [
  #   Run r-c-ocaml-1-setup.sh
  #   ** It may seem redundant to recreate the same reproducible directory that
  #   ** is available in ocamlrun. BUT ... it is a bad idea to couple the
  #   ** bytecode interpreter that runs the installer plugins to the same
  #   ** version as the OCaml compiler we are installing for the end-user.
  [
    "sh" "-eufc"
    """
    env TOPDIR=dkmldir/vendor/dkml-runtime-common/all/emptytop \
      dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh \
      -d dkmldir \
      -t '%{_:share}%/staging-files/generic' \
      -v dl/ocaml \
      -r \
      -k vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ]

  # 2. Copy assets
  [
    "sh" "-eufcx"
    """
    install -d '%{_:share}%/staging-files/windows_x86'
    install -d '%{_:share}%/staging-files/windows_x86_64'
    rm -rf '%{_:share}%/staging-files/windows_x86'
    rm -rf '%{_:share}%/staging-files/windows_x86_64'
    cp -rp assets/staging-files/win32 '%{_:share}%/staging-files/windows_x86'
    cp -rp assets/staging-files/win32 '%{_:share}%/staging-files/windows_x86_64'
    """
  ]

  # 3. Copy minimal dkmldir into staging, adding distribution which has
  #    PowerShell scripts and other Unix scripts needed by setup-userprofile.ps1

  #   Clone minimal dkmldir
  ["rm" "-rf" "%{_:share}%/staging-files/windows_x86/dkmldir"]
  ["rm" "-rf" "%{_:share}%/staging-files/windows_x86_64/dkmldir"]
  ["cp" "-rp" "dkmldir" "%{_:share}%/staging-files/windows_x86"]
  ["cp" "-rp" "dkmldir" "%{_:share}%/staging-files/windows_x86_64"]
  #   Untar runtime-distribution
  ["install" "-d" "%{_:share}%/staging-files/windows_x86/dkmldir/vendor/dkml-runtime-distribution"]
  ["install" "-d" "%{_:share}%/staging-files/windows_x86_64/dkmldir/vendor/dkml-runtime-distribution"]
  ["tar" "xCfz" "%{_:share}%/staging-files/windows_x86/dkmldir/vendor/dkml-runtime-distribution"    "dl/dkml-runtime-distribution.tar.gz" "--strip-components=1"]
  ["tar" "xCfz" "%{_:share}%/staging-files/windows_x86_64/dkmldir/vendor/dkml-runtime-distribution" "dl/dkml-runtime-distribution.tar.gz" "--strip-components=1"]

  # 4. Build install plugin
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "--promote-install-files=false"
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
  ["dune" "install" "-p" name "--create-install-files" name]
]
dev-repo: "git+https://github.com/diskuv/dkml-component-ocamlcompiler.git"
extra-source "dl/ocaml.tar.gz" {
  src: "https://github.com/ocaml/ocaml/archive/4.12.1.tar.gz"
  checksum: "sha256=f5a48a90557cb47ace7b1590fcab1362a1af38629a218350f69c225c57e96a41"
}
extra-source "dl/flexdll.tar.gz" {
  src: "https://github.com/alainfrisch/flexdll/archive/0.39.tar.gz"
  checksum: "sha256=51a6ef2e67ff475c33a76b3dc86401a0f286c9a3339ee8145053ea02d2fb5974"
}
extra-source "dl/dkml-runtime-common.tar.gz" {
  # dkml-runtime-common can be less or equal to DKML_VER
  src: "https://github.com/diskuv/dkml-runtime-common/archive/refs/tags/v0.4.0-prerel19_r3.tar.gz"
  checksum: [
    "sha256=a50c553bfc22ce914dbdd581e785c03266c91c3404d38c9bb6cc11c2f8a96723"
  ]
}
extra-source "dl/dkml-runtime-distribution.tar.gz" {
  # dkml-runtime-distribution can be less or equal to DKML_VER
  src: "https://github.com/diskuv/dkml-runtime-distribution/archive/refs/tags/v0.4.0-prerel19_r10.tar.gz"
  checksum: [
    "sha256=afb0ebd2c6165009e96579dd6ac8e83a4beb0f6f5215196457cfee9fbd989441"
  ]
}
extra-source "dl/dkml-compiler.tar.gz" {
  # dkml-compiler can be less or equal to DKML_VER
  src: "https://github.com/diskuv/dkml-compiler/archive/refs/tags/v4.12.1-prerel5.tar.gz"
  checksum: [
    "sha256=887d9170c8fda7499665a0822e7289a5171d3416ac75fce629bd6c4fcd7c0e2f"
  ]
}
