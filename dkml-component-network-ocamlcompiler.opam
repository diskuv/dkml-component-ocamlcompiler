opam-version: "2.0"
name: "dkml-component-network-ocamlcompiler"
version: "4.12.1~v1.0.2~prerel7"
synopsis: "DKML component for ocamlcompiler"
description:
  "Network installed component for OCaml bytecode and native compiler"
maintainer: ["opensource+diskuv-ocaml@support.diskuv.com"]
authors: ["Diskuv, Inc. <opensource+diskuv-ocaml@support.diskuv.com>"]
license: "Apache-2.0"
homepage: "https://github.com/diskuv/dkml-component-ocamlcompiler"
bug-reports: "https://github.com/diskuv/dkml-component-ocamlcompiler/issues"
depends: [
  "dkml-component-network-unixutils"  {>= "0.1.0"}
  "dkml-component-staging-ocamlrun"   {>= "4.12.1~" & < "4.12.2~"}
  # The hole carved to exclude ~dkml is so that we use the unmodified, compiled-from-master-branch
  # of opam with versions that aligns both the semver (needed for winget among others) and the
  # Debian-based opam version. [~dkml] predates the [~alpha0~20221104, etc.] adjustment.
  "dkml-component-offline-opamshim"   {>= "2.2.0~" & !(>= "2.2.0~dkml20220000" & <= "2.2.0~dkml99999999" )}
  "dkml-install"                      {>= "0.2.0"}
  "dune"                              {>= "2.9"}
  "base64"                            {>= "3.5.0"}
  "diskuvbox"                         {>= "0.1.0"}
  "dkml-runtime-common"               {>= "1.0.2~prerel9"}
  "dkml-runtime-distribution"         {>= "1.0.2~prerel9"}
]
depopts: [
  "dkml-option-vcpkg"
]
build: [
  # OCaml source code
  ["install" "-d" "dl/ocaml/flexdll"]
  ["tar" "xCfz" "dl/ocaml"          "dl/ocaml.tar.gz"   "--strip-components=1"]
  ["tar" "xCfz" "dl/ocaml/flexdll"  "dl/flexdll.tar.gz" "--strip-components=1"]

  # Portable shell scripts for OCaml compiling
  #
  # ** The only portable shell scripts needed are that that compile the bytecode
  # ** interpreter for use in the dkml-component-staging-ocamlrun build:[] section.
  # ** Any other logic needed for compiling the full native-code compiler
  # ** can be done in OCaml bytecode. But since the portable shell scripts
  # ** do 90% of the work needed for the native-code compiler, no strong
  # ** reason (yet) to convert the native-code compiler installation into OCaml
  # ** bytecode.
  #
  #   Create a minimal DKMLDIR (no dkml-runtime-distribution) that can build
  #   the r-c-ocaml-* OCaml compiler. Its structure mimics a
  #   git submodule setup.
  #
  #   <dkmldir>/vendor/drc/
  ["diskuvbox" "copy-dir" "%{dkml-runtime-common:lib}%/all" "dkmldir/vendor/drc/all"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-common:lib}%/unix" "dkmldir/vendor/drc/unix"]
  #   <dkmldir>/.dkmlroot
  ["diskuvbox" "copy-file" "%{dkml-runtime-common:lib}%/template.dkmlroot" "dkmldir/.dkmlroot"]

  #   <dkmldir>/vendor/dkml-compiler/
  ["install" "-d" "dkmldir/vendor/dkml-compiler/src"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-compiler" "dl/dkml-compiler.tar.gz" "--strip-components=1"]

  # Build component
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "--promote-install-files=false"
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
  ["dune" "install" "-p" name "--create-install-files" name]
]
install: [
  #   Run r-c-ocaml-1-setup.sh ... just the OCaml runtime since not yet relocatable!
  #   With an OCaml runtime that is the same version as the full OCaml system we want
  #   to compile, the OCaml system should be compiled quicker (no bootstrap necessary).
  #
  #   ** It may seem redundant to recreate the same reproducible directory that
  #   ** is available in ocamlrun. BUT ... it is a bad idea to couple the
  #   ** bytecode interpreter that runs the installer plugins to the same
  #   ** version as the OCaml compiler we are installing for the end-user.
  [
    "sh" "-eufc"
    """
    env TOPDIR=dkmldir/vendor/drc/all/emptytop \
      dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh \
      -d dkmldir \
      -t '%{_:share}%/staging-files/generic' \
      -v dl/ocaml \
      -r \
      -z \
      -k vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ]

  # 2. Copy assets
  ["diskuvbox" "copy-dir" "assets/staging-files/win32" "%{_:share}%/staging-files/windows_x86"]
  ["diskuvbox" "copy-dir" "assets/staging-files/win32" "%{_:share}%/staging-files/windows_x86_64"]

  # 3. Copy minimal dkmldir into staging, adding distribution which has
  #    PowerShell scripts and other Unix scripts needed by setup-userprofile.ps1

  #   Clone minimal dkmldir
  ["diskuvbox" "copy-dir" "dkmldir" "%{_:share}%/staging-files/windows_x86/dkmldir"]
  ["diskuvbox" "copy-dir" "dkmldir" "%{_:share}%/staging-files/windows_x86_64/dkmldir"]
  #   Unpack runtime-distribution
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/repos" "%{_:share}%/staging-files/windows_x86/dkmldir/vendor/drd/repos"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/repos" "%{_:share}%/staging-files/windows_x86_64/dkmldir/vendor/drd/repos"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/src/unix" "%{_:share}%/staging-files/windows_x86/dkmldir/vendor/drd/src/unix"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/src/unix" "%{_:share}%/staging-files/windows_x86_64/dkmldir/vendor/drd/src/unix"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/src/windows" "%{_:share}%/staging-files/windows_x86/dkmldir/vendor/drd/src/windows"]
  ["diskuvbox" "copy-dir" "%{dkml-runtime-distribution:lib}%/src/windows" "%{_:share}%/staging-files/windows_x86_64/dkmldir/vendor/drd/src/windows"]
]
dev-repo: "git+https://github.com/diskuv/dkml-component-ocamlcompiler.git"
extra-source "dl/ocaml.tar.gz" {
  src: "https://github.com/ocaml/ocaml/archive/4.12.1.tar.gz"
  checksum: "sha256=f5a48a90557cb47ace7b1590fcab1362a1af38629a218350f69c225c57e96a41"
}
extra-source "dl/flexdll.tar.gz" {
  src: "https://github.com/alainfrisch/flexdll/archive/0.39.tar.gz"
  checksum: "sha256=51a6ef2e67ff475c33a76b3dc86401a0f286c9a3339ee8145053ea02d2fb5974"
}
extra-source "dl/dkml-compiler.tar.gz" {
  # TODO: We need a release process for this, or better yet use a normal Opam dependency that
  # has all the content in a share: or lib: folder.
  src: "https://github.com/diskuv/dkml-compiler/releases/download/1.0.2-prerel9-r3/src.tar.gz"
  checksum: [
    "sha256=63e0fd6ca7c5e0f5a1ef7c9f84c1ee335ec5c95a51952fffa1205a60b7123198"
  ]
}
pin-depends: [
  [
    "dkml-runtime-common.1.0.2~prerel9"
    "git+https://github.com/diskuv/dkml-runtime-common.git"
  ]
  [
    "dkml-runtime-distribution.1.0.2~prerel9"
    "git+https://github.com/diskuv/dkml-runtime-distribution.git"
  ]
  [
    "dkml-component-staging-curl.0.2.0"
    "git+https://github.com/diskuv/dkml-component-curl.git"
  ]
  [
    "dkml-component-common-unixutils.0.2.0"
    "git+https://github.com/diskuv/dkml-component-unixutils.git"
  ]
  [
    "dkml-component-staging-unixutils.0.2.0"
    "git+https://github.com/diskuv/dkml-component-unixutils.git"
  ]
  [
    "dkml-component-network-unixutils.0.2.0"
    "git+https://github.com/diskuv/dkml-component-unixutils.git"
  ]
  [
    "dkml-component-common-opam.2.2.0~alpha0~20221104"
    "git+https://github.com/diskuv/dkml-component-opam.git"
  ]
  [
    "dkml-component-staging-opam32.2.2.0~alpha0~20221104"
    "git+https://github.com/diskuv/dkml-component-opam.git"
  ]
  [
    "dkml-component-staging-opam64.2.2.0~alpha0~20221104"
    "git+https://github.com/diskuv/dkml-component-opam.git"
  ]
  [
    "dkml-component-staging-desktop-compile.0.1.0"
    "git+https://github.com/diskuv/dkml-component-desktop.git"
  ]
]
