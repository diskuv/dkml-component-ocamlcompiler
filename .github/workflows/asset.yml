name: Asset Distribution

on:
  push:
    branches:
      # Any commit to the main branch
      - "main"
    tags:
      # Any push to a tag that starts with 'v'
      - v*

jobs:
  setup-dkml:
    uses: 'diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@main'

  build-dkml:
    needs: setup-dkml
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019 # 2019 has Visual Studio 2019
            dist_name: windows
            ocaml_compiler: 4.13.x
            opam-root: D:/.opam
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.dist_name }}
    env:
      OPAMROOT: ${{ matrix.opam-root }}
      DISTNAME: ${{ matrix.dist_name }}
      # Force recompilation rather than download the asset
      DKML_BUST_CACHE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Install MSYS2
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git

      - name: Unbundle Opam (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        run: |
          #!/bin/sh
          set -eufx

          install -d "$OPAMROOT"
          tar xvCfz "$OPAMROOT" "$GITHUB_WORKSPACE"/.ci/dist/setup-dkml-$DISTNAME/opamroot.tar.gz

      - name: Add Opam pins until published in Opam and fdopen repository (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        run: export PATH="$GITHUB_WORKSPACE/.ci/dist/setup-dkml-$DISTNAME:$PATH" && .github/workflows/scripts/pin-unix-asset.sh

      - name: Install Opam package dkml-component-staging-ocamlrun (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        # [shell: bash] would use MSYS2 which conflicts with the D:/cygwin used by ocaml/setup-ocaml@v2.
        # * Cygwin shell does not like the Carriage Returns embedded in {0} so keep a single line
        # * TMP is set in MSYS2 but not Cygwin. Needed by MSVC or get https://docs.microsoft.com/en-us/cpp/error-messages/tool-errors/command-line-error-d8037?view=msvc-170
        shell: msys2 {0}
        # run: set -x && export PATH="/cygdrive/d/cygwin/bin:$PATH" && export TMP=$(cygpath -a "$RUNNER_TEMP") && opam install ./dkml-component-staging-ocamlrun.opam --with-test --yes
        run: set -x && export PATH="$GITHUB_WORKSPACE/.ci/dist/setup-dkml-$DISTNAME:$PATH" && eval $(opam env) && opam switch && opam var && opam option && opam pin && opam repository && opam repository --all && opam install ./dkml-component-staging-ocamlrun.opam --with-test --yes

      # Bundle up single-arch asset

      - name: Bundle up single-arch asset (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        run: export PATH="$GITHUB_WORKSPACE/.ci/dist/setup-dkml-$DISTNAME:$PATH" && tar cvCfz $(opam var dkml-component-staging-ocamlrun:share) $GITHUB_WORKSPACE/dist/$DISTNAME.tar.gz .

      # Upload

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dist_name }}
          path: dist/${{ matrix.dist_name }}.tar.gz

  build-ocaml:
    strategy:
      fail-fast: false
      matrix:
        include:
          # ocaml_compiler
          # --------------
          #
          # ocaml_compiler is to compile+run the Opam steps (example: dune-site),
          # not to compile dkml-component-staging-ocamlrun which directly uses a
          # C compiler.
          #
          # For Linux dockcross, ocaml_compiler is given directly to
          # `opam switch create` so it must be a specific version `4.NN.1` (etc.)
          # rather that a wildcard `4.NN.x`.

          # - os: windows-2019 # 2019 has Visual Studio 2019
          #   dist_name: windows
          #   dune_cache: false
          #   ocaml_compiler: 4.13.x
          - os: ubuntu-latest
            dist_name: linux_x86
            dune_cache: true
            ocaml_compiler: 4.13.1
            dockcross_image: dockcross/manylinux2014-x86
            #   Get rid of: WARNING: The requested image's platform (linux/386) does not match the detected host platform (linux/amd64) and no specific platform was requested
            docker_run_extra_args: --platform linux/386
          - os: ubuntu-latest
            dist_name: linux_x86_64
            dune_cache: true
            ocaml_compiler: 4.13.1
            dockcross_image: dockcross/manylinux2014-x64
          - os: macos-latest
            dist_name: macos
            # Have seen: Error: mkdir(/Users/runner/.cache/dune/db/temp): File exists
            dune_cache: false
            # 4.13.1 gets https://github.com/diskuv/dkml-component-ocamlcompiler/runs/5996576526?check_suite_focus=true ...
            #
            #=== ERROR while compiling ppx_assert.v0.15.0 =================================#
            # context     2.1.2 | macos/x86_64 | ocaml-base-compiler.4.13.1 | git+https://github.com/ocaml/opam-repository.git
            # path        ~/work/dkml-component-ocamlcompiler/dkml-component-ocamlcompiler/_opam/.opam-switch/build/ppx_assert.v0.15.0
            # command     ~/.opam/opam-init/hooks/sandbox.sh build dune build -p ppx_assert -j 3
            # exit-code   1
            # env-file    ~/.opam/log/ppx_assert-6240-71c0f4.env
            # output-file ~/.opam/log/ppx_assert-6240-71c0f4.out
            ### output ###
            # File "runtime-lib/dune", line 2, characters 40-75:
            # 2 |  (libraries base base.caml) (preprocess (pps ppxlib ppx_sexp_conv ppx_cold)))
            #                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            # (cd _build/default && .ppx/dc4ba739e186df91cc7021da417cfc77/ppx.exe --cookie 'library-name="ppx_assert_lib"' -o runtime-lib/runtime.pp.mli --intf runtime-lib/runtime.mli -corrected-suffix .ppx-corrected -diff-cmd - -dump-ast)
            # Command got signal KILL.
            ocaml_compiler: 4.12.x
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.dist_name }}
    env:
      DISTNAME: ${{ matrix.dist_name }}
      DOCKER_RUN_EXTRA_ARGS: ${{ matrix.docker_run_extra_args }}
      CROSS_COMPILER_IMAGE_NAME: ${{ matrix.dockcross_image }}
      # Force recompilation rather than download the asset
      DKML_BUST_CACHE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout dkml-runtime-distribution (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-runtime-distribution
          path: .ci/g/dkml-runtime-distribution
          ref: main

      - name: Get dockcross (Linux)
        if: ${{ startsWith(matrix.dist_name, 'linux') }}
        run: |
          docker run $DOCKER_RUN_EXTRA_ARGS --rm "$CROSS_COMPILER_IMAGE_NAME" > ./dockcross
          chmod +x ./dockcross

      - name: Set Visual Studio environment variables (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: pwsh
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\g\dkml-runtime-distribution\src\windows"
          Import-Module Machine

          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $CompatibleVisualStudios
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps
          echo "DKML_COMPILE_SPEC=1" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_TYPE=VS" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_DIR=$($VisualStudioProps.InstallPath)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_VCVARSVER=$($VisualStudioProps.VcVarsVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_WINSDKVER=$($VisualStudioProps.WinSdkVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_MSVSPREFERENCE=$($VisualStudioProps.MsvsPreference)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_CMAKEGENERATOR=$($VisualStudioProps.CMakeGenerator)" >> $env:GITHUB_ENV

      - name: OCaml ${{ matrix.ocaml_compiler }} (non-Linux)
        if: ${{ !startsWith(matrix.dist_name, 'linux') }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml_compiler }}
          dune-cache: ${{ matrix.dune_cache }}
          opam-pin: true
          opam-depext: false # will complain that dkml-component-network-unixutils is missing

      - name: Add Opam pins until published in Opam repository (non-Linux, non-Windows)
        if: ${{ !startsWith(matrix.dist_name, 'linux') && !startsWith(matrix.dist_name, 'windows') }}
        run: .github/workflows/scripts/pin-unix-asset.sh

      - name: Add Opam pins until published in Opam and fdopen repository (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        run: |
          .github/workflows/scripts/pin-windows-asset.ps1

      - name: Install Opam executable, Opam switch and Opam package dkml-component-staging-ocamlrun in manylinux (Linux)
        if: ${{ startsWith(matrix.dist_name, 'linux') }}
        run: ./dockcross --args "$DOCKER_RUN_EXTRA_ARGS" -- .github/workflows/scripts/install-linux-asset.sh ${{ matrix.ocaml_compiler }}

      - name: Install Opam package dkml-component-staging-ocamlrun (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        # [shell: bash] would use MSYS2 which conflicts with the D:/cygwin used by ocaml/setup-ocaml@v2.
        # * Cygwin shell does not like the Carriage Returns embedded in {0} so keep a single line
        # * TMP is set in MSYS2 but not Cygwin. Needed by MSVC or get https://docs.microsoft.com/en-us/cpp/error-messages/tool-errors/command-line-error-d8037?view=msvc-170
        shell: D:/cygwin/bin/bash.exe --noprofile --norc -eo pipefail {0}
        run: set -x && export PATH="/cygdrive/d/cygwin/bin:$PATH" && export TMP=$(cygpath -a "$RUNNER_TEMP") && opam install ./dkml-component-staging-ocamlrun.opam --with-test --yes

      - name: Install Opam package dkml-component-staging-ocamlrun (non-Linux, non-Windows)
        if: ${{ !startsWith(matrix.dist_name, 'linux') && !startsWith(matrix.dist_name, 'windows') }}
        run: |
          env
          opam install ./dkml-component-staging-ocamlrun.opam --with-test --yes

      # Bundle up single-arch asset

      - name: Bundle up single-arch asset (non-Linux)
        if: ${{ !startsWith(matrix.dist_name, 'linux') }}
        shell: bash
        run: |
          install -d dist
          tar cvCfz $(opam var dkml-component-staging-ocamlrun:share) $GITHUB_WORKSPACE/dist/$DISTNAME.tar.gz .

      - name: Bundle up single-arch asset (Linux)
        if: ${{ startsWith(matrix.dist_name, 'linux') }}
        run: |
          install -d dist
          ./dockcross --args "$DOCKER_RUN_EXTRA_ARGS" -- .github/workflows/scripts/bundle-linux-asset.sh dist/$DISTNAME.tar.gz

      # Upload

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dist_name }}
          path: dist/${{ matrix.dist_name }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs:
      - build-ocaml
      - build-dkml
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Bundle up multi-arch asset
        shell: bash
        run:  tar cvCfz dist $GITHUB_WORKSPACE/asset-dkml-component-staging-ocamlrun.tar.gz .

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: asset-dkml-component-staging-ocamlrun.tar.gz
