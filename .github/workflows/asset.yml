name: Asset Distribution

on:
  push:
    branches:
      # Any commit to the main branch
      - "main"
    tags:
      # Any push to a tag that starts with 'v'
      - v*

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # ocaml_compiler is to compile+run the Opam steps (example: dune-site),
          # not to compile dkml-component-staging-ocamlrun which directly uses a
          # C compiler.

          - os: windows-2019 # 2019 has Visual Studio 2019
            dist_name: windows
            dune_cache: false
            ocaml_compiler: 4.13.x
          - os: ubuntu-latest
            dist_name: linux
            dune_cache: true
            ocaml_compiler: 4.13.x
          - os: macos-latest
            dist_name: mac
            # Have seen: Error: mkdir(/Users/runner/.cache/dune/db/temp): File exists
            dune_cache: false
            # 4.13.1 gets https://github.com/diskuv/dkml-component-ocamlcompiler/runs/5996576526?check_suite_focus=true ...
            #
            #=== ERROR while compiling ppx_assert.v0.15.0 =================================#
            # context     2.1.2 | macos/x86_64 | ocaml-base-compiler.4.13.1 | git+https://github.com/ocaml/opam-repository.git
            # path        ~/work/dkml-component-ocamlcompiler/dkml-component-ocamlcompiler/_opam/.opam-switch/build/ppx_assert.v0.15.0
            # command     ~/.opam/opam-init/hooks/sandbox.sh build dune build -p ppx_assert -j 3
            # exit-code   1
            # env-file    ~/.opam/log/ppx_assert-6240-71c0f4.env
            # output-file ~/.opam/log/ppx_assert-6240-71c0f4.out
            ### output ###
            # File "runtime-lib/dune", line 2, characters 40-75:
            # 2 |  (libraries base base.caml) (preprocess (pps ppxlib ppx_sexp_conv ppx_cold)))
            #                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            # (cd _build/default && .ppx/dc4ba739e186df91cc7021da417cfc77/ppx.exe --cookie 'library-name="ppx_assert_lib"' -o runtime-lib/runtime.pp.mli --intf runtime-lib/runtime.mli -corrected-suffix .ppx-corrected -diff-cmd - -dump-ast)
            # Command got signal KILL.
            ocaml_compiler: 4.12.x
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout dkml-runtime-distribution
        if: ${{ startsWith(matrix.os, 'windows-') }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-runtime-distribution
          path: .ci/g/dkml-runtime-distribution
          ref: main

      - name: Set Visual Studio environment variables
        if: ${{ startsWith(matrix.os, 'windows-') }}
        shell: pwsh
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\g\dkml-runtime-distribution\src\windows"
          Import-Module Machine

          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $CompatibleVisualStudios
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps
          echo $VS_EXPORT_CMDS = "export DKML_COMPILE_SPEC=1; export DKML_COMPILE_TYPE=VS; export DKML_COMPILE_VS_DIR='$($VisualStudioProps.InstallPath)'; export DKML_COMPILE_VS_VCVARSVER='$($VisualStudioProps.VcVarsVer)'; export DKML_COMPILE_VS_WINSDKVER='$($VisualStudioProps.WinSdkVer)'; export DKML_COMPILE_VS_MSVSPREFERENCE='$($VisualStudioProps.MsvsPreference)'; export DKML_COMPILE_VS_CMAKEGENERATOR='$($VisualStudioProps.CMakeGenerator)'"
          echo "DKML_COMPILE_SPEC=1" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_TYPE=VS" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_DIR=$($VisualStudioProps.InstallPath)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_VCVARSVER=$($VisualStudioProps.VcVarsVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_WINSDKVER=$($VisualStudioProps.WinSdkVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_MSVSPREFERENCE=$($VisualStudioProps.MsvsPreference)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_CMAKEGENERATOR=$($VisualStudioProps.CMakeGenerator)" >> $env:GITHUB_ENV
          type $env:GITHUB_ENV

      - name: OCaml ${{ matrix.ocaml_compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml_compiler }}
          dune-cache: ${{ matrix.dune_cache }}
          opam-pin: true
          opam-depext: false # will complain that dkml-component-network-unixutils is missing

      - name: Add Opam pins (until published in Opam repository)
        run: |
          opam pin dkml-install                         'https://github.com/diskuv/dkml-install-api.git#main' --no-action --yes
          opam pin dkml-install-runner                  'https://github.com/diskuv/dkml-install-api.git#main' --no-action --yes
          opam pin dkml-package-console                 'https://github.com/diskuv/dkml-install-api.git#main' --no-action --yes
          opam pin dkml-component-staging-curl          'https://github.com/diskuv/dkml-component-curl.git#main' --no-action --yes
          opam pin dkml-component-staging-unixutils     'https://github.com/diskuv/dkml-component-unixutils.git#main' --no-action --yes
          opam pin dkml-component-network-unixutils     'https://github.com/diskuv/dkml-component-unixutils.git#main' --no-action --yes

      - name: Add Opam pins (until published in fdopen Opam repository)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          opam pin diskuvbox                            'https://github.com/diskuv/diskuvbox.git#main' --no-action --yes

      - name: Install Opam package dkml-component-staging-ocamlrun
        env:
          # Force recompilation rather than download the asset
          DKML_BUST_CACHE: true
        run: |
          env
          opam install ./dkml-component-staging-ocamlrun.opam --with-test

      - name: Bundle up single-arch asset
        shell: bash
        env:
          DISTNAME: ${{ matrix.dist_name }}
        run: |
          install -d dist
          tar cvCfz $(opam var dkml-component-staging-ocamlrun:share) $GITHUB_WORKSPACE/dist/$DISTNAME.tar.gz .

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dist_name }}
          path: dist/${{ matrix.dist_name }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Bundle up multi-arch asset
        shell: bash
        run:  tar cvCfz dist $GITHUB_WORKSPACE/asset-dkml-component-staging-ocamlrun.tar.gz .

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: asset-dkml-component-staging-ocamlrun.tar.gz
